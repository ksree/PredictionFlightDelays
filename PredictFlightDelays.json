{"paragraphs":[{"title":"Flight delay prediction with logistical regression","text":"%md\n\n","user":"admin","dateUpdated":"2018-01-14T17:49:06-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"markdown","editOnDblClick":true},"editorMode":"ace/mode/markdown","title":true,"tableHide":false,"editorHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1515582630553_-198407882","id":"20180110-061030_706660700","dateCreated":"2018-01-10T06:10:30-0500","dateStarted":"2018-01-12T11:55:14-0500","dateFinished":"2018-01-12T11:55:14-0500","status":"FINISHED","errorMessage":"","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3643"},{"title":"Download flight and weather data and load to hdfs","text":"%sh\n\nwget https://www.dropbox.com/s/c7pn0qseqfhz7pw/airline.tar.gz?dl=0  -O /tmp/airline.tar.gz\nwget https://www.dropbox.com/s/rb47vyjaixexzn3/weather.tar.gz?dl=0  -O /tmp/weather.tar.gz\n\ntar -xvf /tmp/airline.tar.gz -C /tmp/data/\ntar -xvf /tmp/weather.tar.gz -C /tmp/data/\n\n##preview downloaded files\n#cat /tmp/data/airline/2007.csv | head\n#cat /tmp/data/airline/2008.csv | head\n#cat /tmp/data/weather/2007.csv | head\n#cat /tmp/data/weather/2008.csv | head\n\n##put data into HDFS\nhdfs dfs -mkdir -p  /tmp/data/airline\nhdfs dfs -mkdir -p  /tmp/data/weather\n\nhdfs dfs -put /tmp/data/airline/2007.csv /tmp/data/airline/\nhdfs dfs -put /tmp/data/airline/2008.csv /tmp/data/airline/\n\nhdfs dfs -put /tmp/data/weather/2007.csv /tmp/data/weather/\nhdfs dfs -put /tmp/data/weather/2008.csv /tmp/data/weather/\n\n","user":"admin","dateUpdated":"2018-01-15T23:19:04-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"sh","editOnDblClick":false},"editorMode":"ace/mode/sh","tableHide":false,"title":true,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"RemoteEndpoint unavailable, outgoing connection not open"}]},"apps":[],"jobName":"paragraph_1515583203329_1688579681","id":"20180110-062003_864398951","dateCreated":"2018-01-10T06:20:03-0500","dateStarted":"2018-01-12T11:55:14-0500","dateFinished":"2018-01-12T11:55:34-0500","status":"ABORT","errorMessage":"org.eclipse.jetty.websocket.api.WebSocketException: RemoteEndpoint unavailable, outgoing connection not open\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.getRemote(WebSocketSession.java:252)\n\tat org.apache.zeppelin.socket.NotebookSocket.send(NotebookSocket.java:72)\n\tat org.apache.zeppelin.socket.NotebookServer.broadcast(NotebookServer.java:478)\n\tat org.apache.zeppelin.socket.NotebookServer.broadcastParagraph(NotebookServer.java:633)\n\tat org.apache.zeppelin.socket.NotebookServer$ParagraphListenerImpl.afterStatusChange(NotebookServer.java:2081)\n\tat org.apache.zeppelin.scheduler.Job.setStatus(Job.java:149)\n\tat org.apache.zeppelin.scheduler.RemoteScheduler.submit(RemoteScheduler.java:148)\n\tat org.apache.zeppelin.notebook.Note.run(Note.java:631)\n\tat org.apache.zeppelin.socket.NotebookServer.persistAndExecuteSingleParagraph(NotebookServer.java:1650)\n\tat org.apache.zeppelin.socket.NotebookServer.runParagraph(NotebookServer.java:1624)\n\tat org.apache.zeppelin.socket.NotebookServer.onMessage(NotebookServer.java:266)\n\tat org.apache.zeppelin.socket.NotebookSocket.onWebSocketText(NotebookSocket.java:59)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextMessage(JettyListenerEventDriver.java:128)\n\tat org.eclipse.jetty.websocket.common.message.SimpleTextMessage.messageComplete(SimpleTextMessage.java:69)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.appendMessage(AbstractEventDriver.java:65)\n\tat org.eclipse.jetty.websocket.common.events.JettyListenerEventDriver.onTextFrame(JettyListenerEventDriver.java:122)\n\tat org.eclipse.jetty.websocket.common.events.AbstractEventDriver.incomingFrame(AbstractEventDriver.java:161)\n\tat org.eclipse.jetty.websocket.common.WebSocketSession.incomingFrame(WebSocketSession.java:309)\n\tat org.eclipse.jetty.websocket.common.extensions.ExtensionStack.incomingFrame(ExtensionStack.java:214)\n\tat org.eclipse.jetty.websocket.common.Parser.notifyFrame(Parser.java:220)\n\tat org.eclipse.jetty.websocket.common.Parser.parse(Parser.java:258)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.readParse(AbstractWebSocketConnection.java:632)\n\tat org.eclipse.jetty.websocket.common.io.AbstractWebSocketConnection.onFillable(AbstractWebSocketConnection.java:480)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Thread.java:745)\n","progressUpdateIntervalMs":500,"$$hashKey":"object:3644"},{"title":"Preprocessing Data","text":"%spark2.spark\n\nimport org.apache.spark.sql.internal.VariableSubstitution\n\n  def preProcessFlightsData(path: String, destination: String) = {\n    val flights_ = spark.read.option(\"header\", \"true\").option(\"inferSchema\", \"true\").csv(path)\n\n    //UDF for date string interpolation\n    val dateConvertorUDF = udf((year: String, month: String, day: String) => year + \"%02d\".format(month.toInt) + \"%02d\".format(day.toInt))\n    //UDF for 0/1 delay\n    val delayUDF = udf((delay: String) => delay match {\n       case (s: String) => if (delay == \"NA\") 0 else if (delay.toInt > 15) 1 else 0\n       case _ => 0\n    })\n    //UDF to extract the hour from time\n    val hourUDF = udf((time: String) => \"%04d\".format(time.toInt).take(2).toInt)\n\n    //Filter -keep only instances where flight was not cancelled,and only the fields that are required. Note that there is no Carrier field, i removed the Unique Carrier field because hot encoder require unique fields\n    val flights = flights_.select($\"Month\".alias(\"month\"),\n      $\"DayOfMonth\".alias(\"day\"),\n      $\"DayOfWeek\".alias(\"dow\"),\n      $\"Origin\".alias(\"origin\"),\n      $\"Distance\".alias(\"distance\"),\n      hourUDF($\"DepTime\").alias(\"time\"),\n      delayUDF($\"DepDelay\").alias(\"delay\"),\n      dateConvertorUDF($\"Year\", $\"Month\", $\"DayOfMonth\").alias(\"date\")\n    ).where($\"Cancelled\" === 0 &&  $\"dest\" === destination)\n\n    flights\n  }\n\n  def preProcessWeatherData(path: String) = {\n    val weather_ = spark.read.csv(path)\n    val toIntUDF = udf((data: String) => data.toInt)\n    //Just take the date, and metric values for TMAX and TMIN\n    val weather = weather_.select($\"_c1\".alias(\"date\"), $\"_c2\".alias(\"metric\"), toIntUDF($\"_c3\".alias(\"value\")).alias(\"value\")\n    ).filter($\"_c0\" === \"USW00094846\" && ($\"_c2\" === \"TMIN\" || $\"_c2\" === \"TMAX\"))\n    \n    val weather_tmin = weather.select($\"date\", $\"value\".alias(\"tmin\")).filter($\"metric\" === \"TMIN\")\n    val weather_tmax = weather.select($\"date\", $\"value\".alias(\"tmax\")).filter($\"metric\" === \"TMAX\")\n    (weather_tmin, weather_tmax)\n  }\n\n  def preProcessData(flightPath: String, weatherPath: String, destination: String) = {\n    val flights = preProcessFlightsData(flightPath, destination)\n    val (weather_tmin, weather_tmax) = preProcessWeatherData(weatherPath)\n    val joined_ = flights.join(weather_tmin, Seq(\"date\"))\n    val joined = joined_.join(weather_tmax,  Seq(\"date\"))\n    joined.drop(\"date\")\n  }\n\n \n","user":"admin","dateUpdated":"2018-01-15T16:44:50-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.sql.internal.VariableSubstitution\npreProcessFlightsData: (path: String, destination: String)org.apache.spark.sql.Dataset[org.apache.spark.sql.Row]\npreProcessWeatherData: (path: String)(org.apache.spark.sql.Dataset[org.apache.spark.sql.Row], org.apache.spark.sql.Dataset[org.apache.spark.sql.Row])\npreProcessData: (flightPath: String, weatherPath: String, destination: String)org.apache.spark.sql.DataFrame\n"}]},"apps":[],"jobName":"paragraph_1515854982201_1707725065","id":"20180113-094942_347585718","dateCreated":"2018-01-13T09:49:42-0500","dateStarted":"2018-01-14T22:35:18-0500","dateFinished":"2018-01-14T22:35:19-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3645"},{"title":"Preprocess the data","text":"%spark2.spark\n\n//This task requirement is for flights Limited to ORD \n//Load and pre process the training data\nval trainingData = preProcessData(\"/tmp/data/airline/2007.csv\",\"/tmp/data/weather/2007.csv\", \"ORD\")\ntrainingData.cache\n\n//Load and pre process the test data\nval testData = preProcessData(\"/tmp/data/airline/2008.csv\",\"/tmp/data/weather/2008.csv\", \"ORD\")\ntestData.cache","user":"admin","dateUpdated":"2018-01-14T22:35:36-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"trainingData: org.apache.spark.sql.DataFrame = [month: int, day: int ... 7 more fields]\nres1574: trainingData.type = [month: int, day: int ... 7 more fields]\ntestData: org.apache.spark.sql.DataFrame = [month: int, day: int ... 7 more fields]\nres1577: testData.type = [month: int, day: int ... 7 more fields]\n"}]},"apps":[],"jobName":"paragraph_1515878538259_1466474128","id":"20180113-162218_1640227221","dateCreated":"2018-01-13T16:22:18-0500","dateStarted":"2018-01-14T22:35:36-0500","dateFinished":"2018-01-14T22:36:27-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3646"},{"title":"View the test data and training data","text":"%spark2.spark\n trainingData.select($\"origin\").distinct.count\n testData.select($\"origin\").distinct.count\n\n","user":"admin","dateUpdated":"2018-01-15T23:07:27-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res1983: Long = 146\nres1984: Long = 148\n"}]},"apps":[],"jobName":"paragraph_1515883480811_1571970826","id":"20180113-174440_1524451844","dateCreated":"2018-01-13T17:44:40-0500","dateStarted":"2018-01-15T23:07:27-0500","dateFinished":"2018-01-15T23:07:30-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3647"},{"title":"Training the model","text":"%spark2.spark\n\nimport org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.feature.{OneHotEncoder,StringIndexer,VectorAssembler,VectorIndexer}\n\n// Convert the categorical (string) values into numeric values\nval originIndexer = new StringIndexer().setInputCol(\"origin\").setOutputCol(\"originIndex\").setHandleInvalid(\"keep\")\n\n// Convert the numerical index columns into One Hot columns\n// The One Hot columns are binary {0,1} values of the categories\nval originEncoder = new OneHotEncoder().setInputCol(\"originIndex\").setOutputCol(\"originVec\")\n\n//creating features column\nval assembler = new VectorAssembler()\n  .setInputCols(Array(\"month\", \"dow\", \"distance\", \"originVec\", \"time\", \"tmin\", \"tmax\"))\n  .setOutputCol(\"features\")\n\n// Create the Logistic Regression instance\nval lr = new LogisticRegression()\n  .setMaxIter(300)\n  .setLabelCol(\"delay\")\n  .setRegParam(0.01)\n  \n// Create the pipeline\nval pipeline = new Pipeline().setStages(Array(originIndexer, originEncoder, assembler, lr))\n\nval model = pipeline.fit(trainingData)\nmodel.write.overwrite().save(\"/tmp/spark-logistic-regression-model\")\n","user":"admin","dateUpdated":"2018-01-15T23:11:35-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true,"tableHide":false,"editorHide":false},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.feature.{OneHotEncoder, StringIndexer, VectorAssembler, VectorIndexer}\noriginIndexer: org.apache.spark.ml.feature.StringIndexer = strIdx_b03b2632d540\noriginEncoder: org.apache.spark.ml.feature.OneHotEncoder = oneHot_3cc43fcdcada\nassembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_120ec2065eb0\nlr: org.apache.spark.ml.classification.LogisticRegression = logreg_c9e7ddce13da\npipeline: org.apache.spark.ml.Pipeline = pipeline_ba8be613dec5\nmodel: org.apache.spark.ml.PipelineModel = pipeline_ba8be613dec5\n"}]},"apps":[],"jobName":"paragraph_1515627519677_2040734442","id":"20180110-183839_459123162","dateCreated":"2018-01-10T18:38:39-0500","dateStarted":"2018-01-15T23:08:16-0500","dateFinished":"2018-01-15T23:09:41-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3648"},{"title":"Calculate score","text":"%spark2.spark\nimport org.apache.spark.ml.PipelineModel\n\n\nval modelLR = PipelineModel.load(\"/tmp/spark-logistic-regression-model\")\n\nval predictions2007 = modelLR.transform(trainingData)\nval predictions2008 = modelLR.transform(testData)\n","user":"admin","dateUpdated":"2018-01-15T23:10:23-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":false,"editorHide":false,"title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.PipelineModel\nmodelLR: org.apache.spark.ml.PipelineModel = pipeline_ba8be613dec5\npredictions2007: org.apache.spark.sql.DataFrame = [month: int, day: int ... 13 more fields]\npredictions2008: org.apache.spark.sql.DataFrame = [month: int, day: int ... 13 more fields]\n"}]},"apps":[],"jobName":"paragraph_1515587547476_-2096892088","id":"20180110-073227_1015615518","dateCreated":"2018-01-10T07:32:27-0500","dateStarted":"2018-01-15T23:10:23-0500","dateFinished":"2018-01-15T23:10:25-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3649"},{"text":"%spark2.spark\n    \npredictions2007.show\npredictions2008.show","user":"admin","dateUpdated":"2018-01-15T23:10:29-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+-----+---+---+------+--------+----+-----+----+----+-----------+-----------------+--------------------+--------------------+--------------------+----------+\n|month|day|dow|origin|distance|time|delay|tmin|tmax|originIndex|        originVec|            features|       rawPrediction|         probability|prediction|\n+-----+---+---+------+--------+----+-----+----+----+-----------+-----------------+--------------------+--------------------+--------------------+----------+\n|    2| 15|  4|   CLE|     316|  22|    1|-167|-100|       13.0| (146,[13],[1.0])|(152,[0,1,2,16,14...|[-0.7017365013244...|[0.33142733564139...|       1.0|\n|    2| 15|  4|   CLE|     316|  14|    1|-167|-100|       13.0| (146,[13],[1.0])|(152,[0,1,2,16,14...|[0.55241628145559...|[0.63469600486865...|       0.0|\n|    2| 15|  4|   IAH|     925|   9|    1|-167|-100|       17.0| (146,[17],[1.0])|(152,[0,1,2,20,14...|[1.30938087761267...|[0.78740953585733...|       0.0|\n|    2| 15|  4|   CLE|     316|  11|    1|-167|-100|       13.0| (146,[13],[1.0])|(152,[0,1,2,16,14...|[1.02272357499809...|[0.73550277923511...|       0.0|\n|    2| 15|  4|   CLE|     316|  17|    1|-167|-100|       13.0| (146,[13],[1.0])|(152,[0,1,2,16,14...|[0.08210898791308...|[0.52051572205177...|       0.0|\n|    2| 15|  4|   CLE|     316|   7|    1|-167|-100|       13.0| (146,[13],[1.0])|(152,[0,1,2,16,14...|[1.64979996638809...|[0.83886401347674...|       0.0|\n|    2| 15|  4|   EWR|     719|   9|    1|-167|-100|        4.0|  (146,[4],[1.0])|(152,[0,1,2,7,149...|[1.09109013044029...|[0.74858694468876...|       0.0|\n|    2| 15|  4|   CLE|     316|  19|    1|-167|-100|       13.0| (146,[13],[1.0])|(152,[0,1,2,16,14...|[-0.2314292077819...|[0.44239955633125...|       1.0|\n|    2| 15|  4|   CLE|     316|  15|    1|-167|-100|       13.0| (146,[13],[1.0])|(152,[0,1,2,16,14...|[0.39564718360809...|[0.59764140141143...|       0.0|\n|    2| 15|  4|   CLE|     316|   8|    1|-167|-100|       13.0| (146,[13],[1.0])|(152,[0,1,2,16,14...|[1.49303086854059...|[0.81653275361928...|       0.0|\n|    2| 15|  4|   ABE|     654|  19|    1|-167|-100|       90.0| (146,[90],[1.0])|(152,[0,1,2,93,14...|[-0.2641882239528...|[0.43433443012283...|       1.0|\n|    2| 15|  4|   ATL|     606|   9|    1|-167|-100|        5.0|  (146,[5],[1.0])|(152,[0,1,2,8,149...|[1.52285727207339...|[0.82095884314584...|       0.0|\n|    2| 15|  4|   AUS|     978|   7|    1|-167|-100|       56.0| (146,[56],[1.0])|(152,[0,1,2,59,14...|[1.69420648529875...|[0.84477655294744...|       0.0|\n|    2| 15|  4|   AVP|     631|  20|    1|-167|-100|      119.0|(146,[119],[1.0])|(152,[0,1,2,122,1...|[-0.1726510919204...|[0.45694412614718...|       1.0|\n|    2| 15|  4|   BDL|     783|  15|    1|-167|-100|       29.0| (146,[29],[1.0])|(152,[0,1,2,32,14...|[0.56157692085364...|[0.63681733076989...|       0.0|\n|    2| 15|  4|   BHM|     584|  23|    1|-167|-100|       80.0| (146,[80],[1.0])|(152,[0,1,2,83,14...|[-1.2485781761972...|[0.22294636036849...|       1.0|\n|    2| 15|  4|   BHM|     584|  13|    1|-167|-100|       80.0| (146,[80],[1.0])|(152,[0,1,2,83,14...|[0.31911280227777...|[0.57910802006179...|       0.0|\n|    2| 15|  4|   BMI|     116|  12|    1|-167|-100|       66.0| (146,[66],[1.0])|(152,[0,1,2,69,14...|[0.87884558001543...|[0.70658293980582...|       0.0|\n|    2| 15|  4|   BMI|     116|  17|    1|-167|-100|       66.0| (146,[66],[1.0])|(152,[0,1,2,69,14...|[0.09500009077792...|[0.52373217676991...|       0.0|\n|    2| 15|  4|   BNA|     409|   6|    0|-167|-100|       25.0| (146,[25],[1.0])|(152,[0,1,2,28,14...|[1.65796659430586...|[0.83996485365474...|       0.0|\n+-----+---+---+------+--------+----+-----+----+----+-----------+-----------------+--------------------+--------------------+--------------------+----------+\nonly showing top 20 rows\n\n+-----+---+---+------+--------+----+-----+----+----+-----------+-----------------+--------------------+--------------------+--------------------+----------+\n|month|day|dow|origin|distance|time|delay|tmin|tmax|originIndex|        originVec|            features|       rawPrediction|         probability|prediction|\n+-----+---+---+------+--------+----+-----+----+----+-----------+-----------------+--------------------+--------------------+--------------------+----------+\n|    6| 19|  4|   CLE|     316|  18|    0| 111| 272|       13.0| (146,[13],[1.0])|(152,[0,1,2,16,14...|[0.54868972620077...|[0.63383154408059...|       0.0|\n|    6| 19|  4|   CLE|     316|   7|    0| 111| 272|       13.0| (146,[13],[1.0])|(152,[0,1,2,16,14...|[2.27314980252329...|[0.90662876986237...|       0.0|\n|    6| 19|  4|   IAH|     925|   9|    0| 111| 272|       17.0| (146,[17],[1.0])|(152,[0,1,2,20,14...|[1.93273071374786...|[0.87355136063866...|       0.0|\n|    6| 19|  4|   IAH|     925|  21|    1| 111| 272|       17.0| (146,[17],[1.0])|(152,[0,1,2,20,14...|[0.05150153957785...|[0.51287253975066...|       0.0|\n|    6| 19|  4|   ABE|     654|  17|    0| 111| 272|       90.0| (146,[90],[1.0])|(152,[0,1,2,93,14...|[0.67269980787729...|[0.66210742750865...|       0.0|\n|    6| 19|  4|   ABE|     654|   7|    0| 111| 272|       90.0| (146,[90],[1.0])|(152,[0,1,2,93,14...|[2.24039078635230...|[0.90381843497067...|       0.0|\n|    6| 19|  4|   ATL|     606|   7|    1| 111| 272|        5.0|  (146,[5],[1.0])|(152,[0,1,2,8,149...|[2.45974530390359...|[0.92127119155505...|       0.0|\n|    6| 19|  4|   ATL|     606|  11|    0| 111| 272|        5.0|  (146,[5],[1.0])|(152,[0,1,2,8,149...|[1.83266891251358...|[0.86207936337651...|       0.0|\n|    6| 19|  4|   ATW|     160|  13|    0| 111| 272|       59.0| (146,[59],[1.0])|(152,[0,1,2,62,14...|[1.40448090850389...|[0.80289397837403...|       0.0|\n|    6| 19|  4|   ATW|     160|   9|    0| 111| 272|       59.0| (146,[59],[1.0])|(152,[0,1,2,62,14...|[2.03155729989389...|[0.88407078051755...|       0.0|\n|    6| 19|  4|   ATW|     160|  11|    0| 111| 272|       59.0| (146,[59],[1.0])|(152,[0,1,2,62,14...|[1.71801910419889...|[0.84787350846576...|       0.0|\n|    6| 19|  4|   BMI|     116|  16|    0| 111| 272|       66.0| (146,[66],[1.0])|(152,[0,1,2,69,14...|[0.87511902476061...|[0.70580974302338...|       0.0|\n|    6| 19|  4|   CAE|     666|  17|    0| 111| 272|       81.0| (146,[81],[1.0])|(152,[0,1,2,84,14...|[0.38575201153120...|[0.59525966566394...|       0.0|\n|    6| 19|  4|   CAE|     666|   5|    0| 111| 272|       81.0| (146,[81],[1.0])|(152,[0,1,2,84,14...|[2.26698118570121...|[0.90610526621048...|       0.0|\n|    6| 19|  4|   CAE|     666|   7|    0| 111| 272|       81.0| (146,[81],[1.0])|(152,[0,1,2,84,14...|[1.95344299000621...|[0.87582157978286...|       0.0|\n|    6| 19|  4|   CAE|     666|  12|    0| 111| 272|       81.0| (146,[81],[1.0])|(152,[0,1,2,84,14...|[1.16959750076870...|[0.76307225439318...|       0.0|\n|    6| 19|  4|   CAE|     666|   8|    0| 111| 272|       81.0| (146,[81],[1.0])|(152,[0,1,2,84,14...|[1.79667389215871...|[0.85774356766928...|       0.0|\n|    6| 19|  4|   CAK|     344|  10|    0| 111| 272|      104.0|(146,[104],[1.0])|(152,[0,1,2,107,1...|[1.95442102538225...|[0.87592790999944...|       0.0|\n|    6| 19|  4|   CHS|     760|  11|    0| 111| 272|       95.0| (146,[95],[1.0])|(152,[0,1,2,98,14...|[1.65248648619147...|[0.83922682302237...|       0.0|\n|    6| 19|  4|   CHS|     760|  15|    0| 111| 272|       95.0| (146,[95],[1.0])|(152,[0,1,2,98,14...|[1.02541009480147...|[0.73602507984451...|       0.0|\n+-----+---+---+------+--------+----+-----+----+----+-----------+-----------------+--------------------+--------------------+--------------------+----------+\nonly showing top 20 rows\n\n"}]},"apps":[],"jobName":"paragraph_1515946014258_-423919354","id":"20180114-110654_1409137835","dateCreated":"2018-01-14T11:06:54-0500","dateStarted":"2018-01-15T23:10:29-0500","dateFinished":"2018-01-15T23:10:30-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3650"},{"text":"%spark2.spark\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nval evaluator = new BinaryClassificationEvaluator()\n  .setLabelCol(\"delay\")\n  .setRawPredictionCol(\"rawPrediction\")\n  .setMetricName(\"areaUnderROC\")\n\nprintln(\"areaUnderROC train data 2007 = \" + evaluator.evaluate(predictions2007))\nprintln(\"areaUnderROC test  data 2008 = \" + evaluator.evaluate(predictions2008))","user":"admin","dateUpdated":"2018-01-15T23:14:04-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nevaluator: org.apache.spark.ml.evaluation.BinaryClassificationEvaluator = binEval_54f67c593c50\nareaUnderROC train data 2007 = 0.7304348076149096\nareaUnderROC test  data 2008 = 0.7284891706940075\n"}]},"apps":[],"jobName":"paragraph_1515786712100_599190217","id":"20180112-145152_989490273","dateCreated":"2018-01-12T14:51:52-0500","dateStarted":"2018-01-15T23:10:50-0500","dateFinished":"2018-01-15T23:12:20-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3651","title":"Evaluator"},{"text":"","user":"admin","dateUpdated":"2018-01-15T23:13:18-0500","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala"},"editorMode":"ace/mode/scala","tableHide":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1515781959746_-592364494","id":"20180112-133239_1694792554","dateCreated":"2018-01-12T13:32:39-0500","status":"READY","progressUpdateIntervalMs":500,"$$hashKey":"object:3652","errorMessage":""}],"name":"/Kapil_Hortonworks_Demo","id":"2D3DP2YDR","angularObjects":{"2D2SC58HW:shared_process":[],"2D67ZXMTQ:shared_process":[],"2D5U6YBUW:shared_process":[],"2D4ER2CES:shared_process":[],"2C4U48MY3_spark2:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}